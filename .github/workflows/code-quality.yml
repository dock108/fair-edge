name: Code Quality & Architecture Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install vulture pipdeptree
    
    - name: Check for unused dependencies
      run: |
        echo "🔍 Checking for pandas/numpy usage..."
        if grep -r "import pandas\|import numpy\|from pandas\|from numpy" --include="*.py" .; then
          echo "❌ pandas/numpy imports detected - these dependencies were removed"
          exit 1
        else
          echo "✅ No pandas/numpy imports found"
        fi
    
    - name: Check app.py size
      run: |
        lines=$(wc -l < app.py)
        echo "📏 app.py has $lines lines"
        if [ $lines -gt 800 ]; then
          echo "❌ app.py has $lines lines (limit: 800) - consider refactoring"
          exit 1
        else
          echo "✅ app.py size is acceptable"
        fi
    
    - name: Check module boundaries
      run: |
        echo "🔍 Checking for boundary violations..."
        if grep -r "from app import\|import app" routes/ --include="*.py" 2>/dev/null; then
          echo "❌ Direct app imports in routes detected - use dependency injection"
          exit 1
        else
          echo "✅ No boundary violations found"
        fi
    
    - name: Dead code detection
      run: |
        echo "🔍 Scanning for dead code..."
        vulture . --min-confidence 80 --ignore-names "*test*,*Test*" || true
    
    - name: Check for security issues
      run: |
        echo "🔒 Checking security..."
        if [ -f .env ] && ! grep -q "^\.env$" .gitignore; then
          echo "❌ .env file exists but not in .gitignore"
          exit 1
        else
          echo "✅ No security issues found"
        fi
    
    - name: Dependency analysis
      run: |
        echo "📦 Analyzing dependencies..."
        total_deps=$(pip list --format=freeze | wc -l)
        echo "Total installed packages: $total_deps"
        if [ $total_deps -gt 250 ]; then
          echo "⚠️ High dependency count ($total_deps) - consider cleanup"
        else
          echo "✅ Dependency count is reasonable"
        fi
    
    - name: Architecture summary
      run: |
        echo "📊 Architecture Summary:"
        echo "- Python files: $(find . -name '*.py' | wc -l)"
        echo "- Largest files:"
        find . -name "*.py" -exec wc -l {} + | sort -nr | head -5
        echo "- Directory sizes:"
        du -sh */ | sort -hr | head -5 