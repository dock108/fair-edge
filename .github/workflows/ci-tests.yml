name: CI Smoke & Load Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  REDIS_URL: redis://localhost:6379/0
  TEST_BASE_URL: http://localhost:8000
  DEBUG_MODE: true
  APP_ENV: test

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        DEBUG_MODE=true
        APP_ENV=test
        REDIS_URL=redis://localhost:6379/0
        SUPABASE_URL=https://test.supabase.co
        SUPABASE_ANON_KEY=test_key
        SUPABASE_JWT_SECRET=test_secret
        THE_ODDS_API_KEY=test_api_key
        DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db
        EOF

    - name: Set up test database
      run: |
        export $(cat .env.test | xargs)
        python -c "
        import asyncio
        import asyncpg
        async def setup():
          conn = await asyncpg.connect('postgresql://test_user:test_password@localhost:5432/test_db')
          await conn.execute('CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"')
          await conn.close()
        asyncio.run(setup())
        "

    - name: Wait for services
      run: |
        echo "Waiting for Redis..."
        timeout 30 bash -c 'until redis-cli -h localhost ping; do sleep 1; done'
        echo "Waiting for PostgreSQL..."
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'

    - name: Start application in background
      run: |
        export $(cat .env.test | xargs)
        python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
        echo $! > app.pid
        
        # Wait for app to start
        echo "Waiting for application to start..."
        timeout 60 bash -c 'until curl -s http://localhost:8000/health > /dev/null; do sleep 2; done'
        echo "Application started successfully"

    - name: Run smoke tests
      run: |
        export $(cat .env.test | xargs)
        pytest tests/test_smoke_ci.py -v --tb=short --durations=10
      timeout-minutes: 10

    - name: Check application logs on failure
      if: failure()
      run: |
        echo "=== Application logs ==="
        if [ -f app.pid ]; then
          kill -0 $(cat app.pid) 2>/dev/null && echo "App still running" || echo "App stopped"
        fi
        curl -s http://localhost:8000/health || echo "Health endpoint failed"

    - name: Cleanup
      if: always()
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid) 2>/dev/null || true
          rm app.pid
        fi

  load-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: smoke-tests  # Only run if smoke tests pass
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment
      run: |
        cat > .env.test << EOF
        DEBUG_MODE=true
        APP_ENV=test
        REDIS_URL=redis://localhost:6379/0
        SUPABASE_URL=https://test.supabase.co
        SUPABASE_ANON_KEY=test_key
        SUPABASE_JWT_SECRET=test_secret
        THE_ODDS_API_KEY=test_api_key
        WEB_CONCURRENCY=2
        EOF

    - name: Start application with limited resources
      run: |
        export $(cat .env.test | xargs)
        python -m uvicorn app:app --host 0.0.0.0 --port 8000 --workers 2 &
        echo $! > app.pid
        
        echo "Waiting for application..."
        timeout 60 bash -c 'until curl -s http://localhost:8000/health > /dev/null; do sleep 2; done'

    - name: Run quick load test
      run: |
        export $(cat .env.test | xargs)
        python -m locust \
          -f tests/locustfile.py \
          --host http://localhost:8000 \
          --users 10 \
          --spawn-rate 2 \
          --run-time 60s \
          --headless \
          --html load_test_report.html \
          --csv load_test_results
      timeout-minutes: 5

    - name: Validate load test results
      run: |
        echo "=== Load Test Summary ==="
        if [ -f load_test_results_stats.csv ]; then
          echo "Load test completed successfully"
          cat load_test_results_stats.csv
          
          # Check failure rate
          total_requests=$(tail -n 1 load_test_results_stats.csv | cut -d',' -f3)
          total_failures=$(tail -n 1 load_test_results_stats.csv | cut -d',' -f4)
          
          echo "Total requests: $total_requests"
          echo "Total failures: $total_failures"
          
          # Fail if error rate > 5%
          if [ "$total_requests" -gt 0 ]; then
            error_rate=$(( total_failures * 100 / total_requests ))
            echo "Error rate: ${error_rate}%"
            if [ "$error_rate" -gt 5 ]; then
              echo "❌ Error rate too high: ${error_rate}%"
              exit 1
            else
              echo "✅ Error rate acceptable: ${error_rate}%"
            fi
          fi
        else
          echo "❌ Load test results not found"
          exit 1
        fi

    - name: Upload load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: |
          load_test_report.html
          load_test_results*.csv

    - name: Cleanup
      if: always()
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid) 2>/dev/null || true
          rm app.pid
        fi

  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: smoke-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run existing test suite
      run: |
        export REDIS_URL=redis://localhost:6379/0
        export DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db
        export DEBUG_MODE=true
        
        # Run existing tests that don't require full app startup
        pytest tests/test_enum_types.py tests/test_event_time_index.py -v --tb=short

  docker-build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t bet-intel:test .

    - name: Test Docker image startup
      run: |
        # Start services
        docker network create test-network
        
        docker run -d --name test-redis \
          --network test-network \
          redis:7-alpine
        
        # Start application with minimal config
        docker run -d --name test-app \
          --network test-network \
          -p 8000:8000 \
          -e REDIS_URL=redis://test-redis:6379/0 \
          -e DEBUG_MODE=true \
          -e SUPABASE_URL=https://test.supabase.co \
          -e SUPABASE_ANON_KEY=test_key \
          -e SUPABASE_JWT_SECRET=test_secret \
          -e THE_ODDS_API_KEY=test_api_key \
          bet-intel:test

    - name: Wait and test container health
      run: |
        echo "Waiting for container to start..."
        timeout 60 bash -c 'until curl -s http://localhost:8000/health > /dev/null; do sleep 2; done'
        
        # Test health endpoint
        response=$(curl -s http://localhost:8000/health)
        echo "Health response: $response"
        
        if echo "$response" | grep -q '"status"'; then
          echo "✅ Docker container health check passed"
        else
          echo "❌ Docker container health check failed"
          docker logs test-app
          exit 1
        fi

    - name: Cleanup Docker resources
      if: always()
      run: |
        docker stop test-app test-redis 2>/dev/null || true
        docker rm test-app test-redis 2>/dev/null || true
        docker network rm test-network 2>/dev/null || true

  performance-benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [smoke-tests, load-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install hyperfine

    - name: Run performance benchmarks
      run: |
        export DEBUG_MODE=true
        export REDIS_URL=redis://localhost:6379/0
        
        # Start Redis
        docker run -d --name benchmark-redis -p 6379:6379 redis:7-alpine
        
        # Start app
        python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
        echo $! > app.pid
        
        # Wait for startup
        timeout 60 bash -c 'until curl -s http://localhost:8000/health > /dev/null; do sleep 2; done'
        
        # Benchmark key endpoints
        echo "🔍 Benchmarking critical endpoints..."
        hyperfine --warmup 3 --runs 10 \
          'curl -s http://localhost:8000/health' \
          'curl -s http://localhost:8000/' \
          'curl -s http://localhost:8000/api/opportunities' \
          --export-json benchmark_results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmarks
        path: benchmark_results.json

    - name: Cleanup
      if: always()
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid) 2>/dev/null || true
        fi
        docker stop benchmark-redis 2>/dev/null || true
        docker rm benchmark-redis 2>/dev/null || true 