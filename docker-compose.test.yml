version: '3.8'

# Test configuration for CI/CD and local testing
# Usage: docker-compose -f docker-compose.yml -f docker-compose.test.yml up

services:
  # Test API service with test configuration
  api-test:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8001:8000"  # Different port to avoid conflicts
    volumes:
      - .:/app
    environment:
      - REDIS_URL=redis://redis-test:6379/0
      - DEBUG_MODE=true
      - APP_ENV=test
      - SUPABASE_URL=https://test.supabase.co
      - SUPABASE_ANON_KEY=test_key
      - SUPABASE_JWT_SECRET=test_secret
      - THE_ODDS_API_KEY=test_api_key
      - WEB_CONCURRENCY=2
      - WAIT_FOR_DEPS=true
      - RUN_MIGRATIONS=false
    depends_on:
      redis-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - test

  # Test Redis instance
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Different port for testing
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    profiles:
      - test

  # Test PostgreSQL instance
  postgres-test:
    image: postgres:15-alpine
    ports:
      - "5433:5432"  # Different port for testing
    environment:
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_USER=test_user
      - POSTGRES_DB=test_db
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 5s
      timeout: 3s
      retries: 5
    profiles:
      - test

  # Load testing service using Locust
  load-test:
    build: 
      context: .
      dockerfile: Dockerfile
    command: >
      bash -c "
        echo 'Waiting for API to be ready...' &&
        timeout 60 bash -c 'until curl -s http://api-test:8000/health > /dev/null; do sleep 2; done' &&
        echo 'Starting load test...' &&
        python -m locust -f tests/locustfile.py --host http://api-test:8000 --users 10 --spawn-rate 2 --run-time 60s --headless --html /tmp/load_test_report.html --csv /tmp/load_test_results
      "
    volumes:
      - ./test-results:/tmp
    depends_on:
      api-test:
        condition: service_healthy
    networks:
      - test-network
    profiles:
      - load-test

  # Smoke testing service
  smoke-test:
    build: 
      context: .
      dockerfile: Dockerfile
    command: >
      bash -c "
        echo 'Waiting for API to be ready...' &&
        timeout 60 bash -c 'until curl -s http://api-test:8000/health > /dev/null; do sleep 2; done' &&
        echo 'Running smoke tests...' &&
        pytest tests/test_smoke_ci.py -v --tb=short
      "
    environment:
      - TEST_BASE_URL=http://api-test:8000
      - REDIS_URL=redis://redis-test:6379/0
    depends_on:
      api-test:
        condition: service_healthy
    networks:
      - test-network
    profiles:
      - smoke-test

  # Test runner for all existing tests
  test-runner:
    build: 
      context: .
      dockerfile: Dockerfile
    command: >
      bash -c "
        echo 'Running comprehensive test suite...' &&
        pytest tests/ -v --tb=short --ignore=tests/test_smoke_ci.py --maxfail=5
      "
    environment:
      - REDIS_URL=redis://redis-test:6379/0
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/test_db
      - DEBUG_MODE=true
      - APP_ENV=test
    depends_on:
      redis-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
    networks:
      - test-network
    profiles:
      - integration-test

volumes:
  postgres_test_data:
    driver: local

networks:
  test-network:
    driver: bridge

# Example usage commands:
# 
# 1. Run smoke tests:
#    docker-compose --profile smoke-test up --build --abort-on-container-exit
#
# 2. Run load tests:  
#    docker-compose --profile load-test up --build --abort-on-container-exit
#
# 3. Run integration tests:
#    docker-compose --profile integration-test up --build --abort-on-container-exit
#
# 4. Run all test services:
#    docker-compose --profile test --profile smoke-test --profile load-test up --build
#
# 5. Clean up test resources:
#    docker-compose -f docker-compose.yml -f docker-compose.test.yml down -v 