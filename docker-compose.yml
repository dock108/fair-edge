# Fair-Edge - Unified Docker Compose
# Use: docker compose up -d

name: fair-edge

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    ports:
      - "8000:8000"
    volumes:
      - .:/app  # Hot reload for development
    dns:
      - 8.8.8.8
      - 1.1.1.1
    env_file:
      - .env.local
    environment:
      - REDIS_URL=redis://redis:6379/0
      - WEB_CONCURRENCY=2
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    env_file:
      - frontend/.env.local
    environment:
      - CHOKIDAR_USEPOLLING=true
      - VITE_API_URL=http://api:8000  # Override for Docker networking
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    entrypoint: ["/entrypoints/celery-worker.sh"]
    volumes:
      - .:/app
    dns:
      - 8.8.8.8
      - 1.1.1.1
    env_file:
      - .env.local
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_CONCURRENCY=2
    depends_on:
      redis:
        condition: service_healthy

  # Celery Beat
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    entrypoint: ["/entrypoints/celery-beat.sh"]
    volumes:
      - .:/app
    dns:
      - 8.8.8.8
      - 1.1.1.1
    env_file:
      - .env.local
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Caddy Reverse Proxy (Production Only)
  caddy:
    image: caddy:2.7-alpine
    profiles:
      - production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - frontend_build:/srv/frontend
      - /var/log/caddy:/var/log/caddy
    depends_on:
      - api
      - frontend
    restart: unless-stopped

volumes:
  redis_data:
  frontend_node_modules:
  caddy_data:
  caddy_config:
  frontend_build: