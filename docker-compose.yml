# Fair-Edge - Unified Docker Compose
# Use: docker compose up -d

name: fair-edge

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - REDIS_URL=redis://redis:6379/0
      - REFRESH_INTERVAL_MINUTES=${REFRESH_INTERVAL_MINUTES:-5}
      - DEBUG_MODE=${DEBUG_MODE:-true}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:5173,http://localhost:3000}
      - WEB_CONCURRENCY=2
      # Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      # External APIs
      - ODDS_API_KEY=${ODDS_API_KEY}
      # Stripe (optional)
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - VITE_API_URL=${API_URL}
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - VITE_APP_TITLE=${APP_TITLE}
      - VITE_APP_VERSION=${APP_VERSION}
      - VITE_ENABLE_DEV_TOOLS=${ENABLE_DEV_TOOLS}
      - VITE_ENABLE_ANALYTICS=${ENABLE_ANALYTICS}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    entrypoint: ["/entrypoints/celery-worker.sh"]
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_CONCURRENCY=${CELERY_CONCURRENCY:-2}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - ODDS_API_KEY=${ODDS_API_KEY}
    depends_on:
      redis:
        condition: service_healthy

  # Celery Beat
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    entrypoint: ["/entrypoints/celery-beat.sh"]
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - REDIS_URL=redis://redis:6379/0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - ODDS_API_KEY=${ODDS_API_KEY}
    depends_on:
      redis:
        condition: service_healthy

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis_data:
  frontend_node_modules: