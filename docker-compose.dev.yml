# FairEdge - Sports Betting +EV Analysis Platform
name: fairedge

services:
  # React Frontend Development Server
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
      target: frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./.env.development:/app/../.env.development:ro
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - fairedge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Main FastAPI Application
  api:
    build: 
      context: .
      dockerfile: docker/Dockerfile.dev
      target: backend-dev
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - REFRESH_INTERVAL_MINUTES=5
      - DEBUG_MODE=true
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
      - STRIPE_BASIC_PRICE=${STRIPE_BASIC_PRICE:-}
      - STRIPE_PREMIUM_PRICE=${STRIPE_PREMIUM_PRICE:-}
      - WEB_CONCURRENCY=2
      - WAIT_FOR_DEPS=true
      - RUN_MIGRATIONS=false
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fairedge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
      target: backend-dev
    command: ["/entrypoints/celery-worker.sh"]
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - CELERY_CONCURRENCY=2
      - CELERY_LOGLEVEL=info
      - REFRESH_INTERVAL_MINUTES=5
      - PYTHONPATH=/app
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fairedge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "services.celery_app.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
      target: backend-dev
    command: ["/entrypoints/celery-beat.sh"]
    volumes:
      - .:/app
      - celery_beat_data:/app/celery-data
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - CELERY_LOGLEVEL=info
      - REFRESH_INTERVAL_MINUTES=5
      - PYTHONPATH=/app
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fairedge-network
    restart: unless-stopped

  # Redis Cache & Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - fairedge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis CLI (for debugging)
  redis_cli:
    image: redis:7-alpine
    command: redis-cli -h redis
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fairedge-network
    profiles:
      - debug

volumes:
  redis_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  fairedge-network:
    driver: bridge

# Development override (docker-compose.override.yml)
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up 