# FairEdge - Hetzner Production Deployment Configuration
# Complete containerized stack with automatic HTTPS via Caddy
name: fairedge-prod

services:
  # Caddy Reverse Proxy with Automatic HTTPS
  caddy:
    image: caddy:2.7-alpine
    container_name: fairedge-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - frontend_build:/srv/frontend:ro
      - ./logs/caddy:/var/log/caddy
    environment:
      - DOMAIN=${DOMAIN:-app.yourdomain.com}
    networks:
      - fairedge-network
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "caddy", "validate", "--config", "/etc/caddy/Caddyfile"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend Build (runs once to create static files)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      target: production
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
        - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
    container_name: fairedge-frontend-build
    volumes:
      - frontend_build:/app/dist
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-FairEdge Sports Betting}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-2.0.0}
      - VITE_ENABLE_DEV_TOOLS=${VITE_ENABLE_DEV_TOOLS:-false}
      - VITE_ENABLE_ANALYTICS=${VITE_ENABLE_ANALYTICS:-true}
    networks:
      - fairedge-network
    profiles:
      - build

  # Production FastAPI Application
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: fairedge-api
    expose:
      - "8000"
    environment:
      - ENVIRONMENT=production
      - WEB_CONCURRENCY=${WEB_CONCURRENCY:-4}
      - REDIS_URL=redis://redis:6379/0
      - RUN_MIGRATIONS=true
      - BIND_HOST=0.0.0.0
      - BIND_PORT=8000
      # Database & Auth
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      # External APIs
      - ODDS_API_KEY=${ODDS_API_KEY}
      - REFRESH_INTERVAL_MINUTES=${REFRESH_INTERVAL_MINUTES:-15}
      # Payments
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_BASIC_PRICE=${STRIPE_BASIC_PRICE}
      - STRIPE_PREMIUM_PRICE=${STRIPE_PREMIUM_PRICE}
      - CHECKOUT_SUCCESS_URL=${CHECKOUT_SUCCESS_URL}
      - CHECKOUT_CANCEL_URL=${CHECKOUT_CANCEL_URL}
      # Security
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ADMIN_SECRET=${ADMIN_SECRET}
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - ./logs/api:/app/logs
      - api_data:/app/data
    networks:
      - fairedge-network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: fairedge-celery-worker
    command: ["/entrypoints/celery-worker.sh"]
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - CELERY_CONCURRENCY=${CELERY_CONCURRENCY:-4}
      - CELERY_LOGLEVEL=${CELERY_LOGLEVEL:-info}
      - CELERY_MAX_TASKS_PER_CHILD=${CELERY_MAX_TASKS_PER_CHILD:-1000}
      - CELERY_MAX_MEMORY_PER_CHILD=${CELERY_MAX_MEMORY_PER_CHILD:-200000}
      - REFRESH_INTERVAL_MINUTES=${REFRESH_INTERVAL_MINUTES:-15}
      # Database & Auth
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      # External APIs
      - ODDS_API_KEY=${ODDS_API_KEY}
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - ./logs/celery:/app/logs
      - celery_data:/app/celery-data
    networks:
      - fairedge-network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "services.celery_app.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: fairedge-celery-beat
    command: ["/entrypoints/celery-beat.sh"]
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - CELERY_LOGLEVEL=${CELERY_LOGLEVEL:-info}
      - REFRESH_INTERVAL_MINUTES=${REFRESH_INTERVAL_MINUTES:-15}
      # Database & Auth
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      # External APIs
      - ODDS_API_KEY=${ODDS_API_KEY}
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - ./logs/celery:/app/logs
      - celery_beat_data:/app/celery-data
    networks:
      - fairedge-network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: fairedge-redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    networks:
      - fairedge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Watchtower for automatic updates (optional)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: fairedge-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600  # Check every hour
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
    networks:
      - fairedge-network
    restart: unless-stopped
    profiles:
      - watchtower

  # Monitoring - Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fairedge-prometheus
    ports:
      - "127.0.0.1:9090:9090"  # Only accessible locally
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - fairedge-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fairedge-grafana
    ports:
      - "127.0.0.1:3000:3000"  # Only accessible locally
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://${DOMAIN:-app.yourdomain.com}/grafana/
    networks:
      - fairedge-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  celery_data:
    driver: local
  celery_beat_data:
    driver: local
  api_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  frontend_build:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  fairedge-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16