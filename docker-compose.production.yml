# FairEdge Production Configuration
# Simple one-command deployment: docker compose -f docker-compose.production.yml up -d

name: fair-edge-production

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    ports:
      - "8000:8000"
    dns:
      - 8.8.8.8
      - 1.1.1.1
    env_file:
      - .env.production
    environment:
      - REDIS_URL=redis://redis:6379/0
      - WEB_CONCURRENCY=4
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Frontend + Reverse Proxy (Caddy with embedded React app)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: caddy-frontend
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
        - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - /var/log/caddy:/var/log/caddy
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    entrypoint: ["/entrypoints/celery-worker.sh"]
    dns:
      - 8.8.8.8
      - 1.1.1.1
    env_file:
      - .env.production
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_CONCURRENCY=4
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import celery; print('celery ok')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Celery Beat
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    entrypoint: ["/entrypoints/celery-beat.sh"]
    dns:
      - 8.8.8.8
      - 1.1.1.1
    env_file:
      - .env.production
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import celery; print('celery ok')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  redis_data:
  caddy_data:
  caddy_config:
