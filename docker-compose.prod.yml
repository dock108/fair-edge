# FairEdge Production Environment
name: fairedge-prod

services:
  # Production React Frontend (built static files)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=https://api.fairedge.com
    networks:
      - fairedge-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production FastAPI Application
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --workers 4
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REFRESH_INTERVAL_MINUTES=30
      - DEBUG_MODE=false
      - CORS_ORIGINS=https://fairedge.com,https://www.fairedge.com
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_BASIC_PRICE=${STRIPE_BASIC_PRICE}
      - STRIPE_PREMIUM_PRICE=${STRIPE_PREMIUM_PRICE}
      - WAIT_FOR_DEPS=true
      - RUN_MIGRATIONS=true
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fairedge-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A services.celery_app.celery_app worker --loglevel=warning --concurrency=4
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REFRESH_INTERVAL_MINUTES=30
      - PYTHONPATH=/app
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fairedge-network
    restart: always
    healthcheck:
      test: ["CMD", "celery", "-A", "services.celery_app.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A services.celery_app.celery_app beat --loglevel=warning --schedule=/app/celery-data/beat.db
    volumes:
      - celery_beat_data:/app/celery-data
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REFRESH_INTERVAL_MINUTES=30
      - PYTHONPATH=/app
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fairedge-network
    restart: always

  # Production Redis
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    networks:
      - fairedge-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  fairedge-network:
    driver: bridge 